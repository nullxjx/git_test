
x = "@@ -0,0 +1,85 @@\n+import os\n+import sys\n+from utils.file_util import check_file_exist_and_size, check_folder_exist_and_size\n+from apis import HTTPAPI, GrpcClient\n+from builtin import BuiltinFunctions\n+sys.path.append(\"../utils\")\n+\n+\n+# 原始文件对象\n+# 管理原始文件的目的是确认和数据行的关系，确保数据行准确性，当数据行出现明显错误时，比如大量行数据缺失，可以找到原始数据进行审查\n+class RawFile:\n+    def __init__(self, dataset_id, raw_id, http_service: HTTPAPI, grpc_client: GrpcClient, name=None):\n+        self.http_api_service = http_service\n+        self.grpc_client = grpc_client\n+        self.dataset_id = dataset_id\n+        self.id = raw_id\n+        self.name = name\n+\n+    def _check_raw_data_exists(self):\n+        pass\n+\n+    def generate_data_row_by_builtin_func(self, filename, func: str, upload=False):\n+        if upload:\n+            upload_response = self.upload_single_file(filename)\n+            print(upload_response)\n+\n+        # 使用纯 python 来增强兼容性\n+        os.environ[\"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION\"] = \"python\"\n+        builtin_func = BuiltinFunctions.get(func)\n+        if not builtin_func:\n+            raise ValueError(f\"Invalid builtin function: {func}\")\n+        job_func = builtin_func(filename, self.dataset_id, self.id, self.grpc_client.get_grpc_channel)\n+        job_func()\n+\n+    def upload_folder_dataset(self, folder_dir, samples, upload=False):\n+        \"\"\"\n+        apps数据集和huggingface数据集都可以用这个接口，他们都是一个目录下存在多行数据的数据集\n+        :param folder_dir:\n+        :param samples:\n+        :param upload:\n+        :return:\n+        \"\"\"\n+        if upload:\n+            self.upload_folder(folder_dir)\n+        # 使用纯 python 来增强兼容性\n+        os.environ[\"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION\"] = \"python\"\n+        builtin_func = BuiltinFunctions.get(\"floder_dataset\")\n+        if not builtin_func:\n+            raise ValueError(f\"Invalid builtin function: floder_dataset\")\n+        job_func = builtin_func(folder_dir, samples, self.dataset_id, self.id, self.grpc_client.get_grpc_channel)\n+        job_func()\n+\n+    def upload_samples_with_single_file(self, file_path, samples, upload=False):\n+        \"\"\"\n+        上传所有sample在同一个文件的数据集\n+        :param file_path: 文件路径\n+        :param samples:\n+        :param upload:\n+        :return:\n+        \"\"\"\n+        if upload:\n+            self.upload_single_file(file_path)\n+        # 使用纯 python 来增强兼容性\n+        os.environ[\"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION\"] = \"python\"\n+        builtin_func = BuiltinFunctions.get(\"floder_dataset\")\n+        if not builtin_func:\n+            raise ValueError(f\"Invalid builtin function: floder_dataset\")\n+        job_func = builtin_func(\"\", samples, self.dataset_id, self.id, self.grpc_client.get_grpc_channel)\n+        job_func()\n+\n+    def get_data_row_count(self):\n+        return self.http_api_service.get_raw_file_row_count(self.dataset_id, self.id).json()\n+\n+    def upload_single_file(self, file: str):\n+        files_exist, error_msg = check_file_exist_and_size(file)\n+        if not files_exist:\n+            raise ValueError(error_msg)\n+        return self.http_api_service.upload_single_file(self.dataset_id, self.id, file).json()\n+\n+    def upload_folder(self, folder: str):\n+        exist, error_msg = check_folder_exist_and_size(folder)\n+        if not exist:\n+            raise ValueError(error_msg)\n+        prefix = folder.split(\"/\")[-1]\n+        return self.http_api_service.upload_folder(self.dataset_id, self.id, folder, prefix)\n"

print(x)
